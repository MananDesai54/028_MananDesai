# -*- coding: utf-8 -*-
"""1_DT_Weather_Entropy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1te6vGIvnydGSiPLOI2DIWHWQ5i8ZKLPs

**Aim: Implement Decsion Tree classifier**


- Implement Decision Tree classifier using scikit learn library
- Test the classifier for Weather dataset

Step 1: Import necessary libraries.
"""

import matplotlib.pyplot as plt

from sklearn import preprocessing
from sklearn.tree import DecisionTreeClassifier, export_graphviz, plot_tree

from subprocess import call

from google.colab import drive
drive.mount("/content/drive")

"""Step 2: Prepare dataset."""

#Predictor variables
Outlook = ['Rainy', 'Rainy', 'Overcast', 'Sunny', 'Sunny', 'Sunny', 'Overcast', 'Rainy', 'Rainy', 'Sunny', 'Rainy','Overcast', 'Overcast', 'Sunny']
Temperature = ['Hot', 'Hot', 'Hot', 'Mild', 'Cool', 'Cool', 'Cool', 'Mild', 'Cool', 'Mild', 'Mild', 'Mild', 'Hot', 'Mild']
Humidity = ['High', 'High', 'High', 'High', 'Normal', 'Normal', 'Normal', 'High', 'Normal', 'Normal', 'Normal', 'High', 'Normal', 'High']
Wind = ['False', 'True', 'False', 'False', 'False', 'True', 'True', 'False', 'False', 'False', 'True', 'True', 'False', 'True']

#Class Label:
Play = ['No', 'No', 'Yes', 'Yes', 'Yes', 'No', 'Yes', 'No', 'Yes', 'Yes', 'Yes', 'Yes', 'Yes', 'No']

"""Step 3: Digitize the data set using encoding"""

# creating labelEncoder
le = preprocessing.LabelEncoder()

print("-------------Mappings-----------\n")
# Converting string labels into numbers.
Outlook_encoded = le.fit_transform(Outlook)
Outlook_name_mapping = dict(zip(le.classes_, le.transform(le.classes_)))
print("Outllok mapping: ",Outlook_name_mapping)

Temperature_encoded = le.fit_transform(Temperature)
Temperature_name_mapping = dict(zip(le.classes_, le.transform(le.classes_)))
print("Temperature mapping: ",Temperature_name_mapping)

Humidity_encoded = le.fit_transform(Humidity)
Humidity_name_mapping = dict(zip(le.classes_, le.transform(le.classes_)))
print("Humidity mapping: ",Humidity_name_mapping)

Wind_encoded = le.fit_transform(Wind)
Wind_name_mapping = dict(zip(le.classes_, le.transform(le.classes_)))
print("Wind mapping: ",Wind_name_mapping)

Play_encoded = le.fit_transform(Play)
Play_name_mapping = dict(zip(le.classes_, le.transform(le.classes_)))
print("Play mapping: ",Play_name_mapping)

print("\n-------------Data After Encoding----------------\n")
print("Weather: " ,Outlook_encoded)
print("Temerature: " ,Temperature_encoded)
print("Humidity: " ,Humidity_encoded)
print("Wind: " ,Wind_encoded)
print("Play: " ,Play_encoded)

"""Step 4: Merge different features to prepare dataset"""

features = tuple(zip(Outlook_encoded, Temperature_encoded, Humidity_encoded, Wind_encoded))
print(features)

"""Step 5: Train ’Create and Train DecisionTreeClassifier’"""

#Create a Decision Tree Classifier (using Entropy)
dtc = DecisionTreeClassifier(criterion = "entropy")

# Train the model using the training sets
dtc.fit(features, Play_encoded)   #(features, Class_label)

"""Step 6: Predict Output for new data"""

#Predict Output
pred = dtc.predict([[0, 1, 1, 0],[2, 2, 1, 1], [2, 2, 0, 1]])
print("Prediction on whether play or not:: ", pred)

"""Step 7: Display Decsion Tree Created
 
 - This step requires graphviz and tkinter packages installed
"""

export_graphviz(dtc,out_file='tree_entropy.dot',
               feature_names=['outlook','temperature','humidity','wind'],
               class_names=['do_not_play','play'], 
               filled=True)

# Convert to png
call(['dot', '-Tpng', 'tree_entropy.dot', '-o', 'tree_entropy.png', '-Gdpi=600'])

# Display in python
plt.figure(figsize = (14, 18))
plt.imshow(plt.imread('tree_entropy.png'))
plt.axis('off');
plt.show();

print(plot_tree(dtc,  class_names = ['do_not_play','play'], fontsize = 6, filled=True, impurity=True))